resultMap
  ·constructor–实例化的时候通过构造器将结果集注入到类中
      idArg– ID 参数; 将结果集标记为ID，以方便全局调用
      arg–注入构造器的结果集
  ·id–结果集ID，将结果集标记为ID，以方便全局调用
  ·result–注入一个字段或者javabean属性的结果
  ·association–复杂类型联合;许多查询结果合成这个类型
            嵌套结果映射– associations能引用自身,或者从其它地方引用
  ·collection–复杂类型集合
            嵌套结果映射– collections能引用自身,或者从其它地方引用
  ·discriminator–使用一个结果值以决定使用哪个resultMap
      case–基于不同值的结果映射
            嵌套结果映射–case也能引用它自身, 所以也能包含这些同样的元素。它也可以从外部引用resultMap



id, result元素
<id property="id" column="post_id"/>
<result property="subject" column="post_subject"/>
这是最基本的结果集映射。id 和result 将列映射到属性或简单的数据类型字段(String, int, double, Date等)。
这两者唯一不同的是，在比较对象实例时id 作为结果集的标识属性。这有助于提高总体性能，特别是应用缓存和嵌套结果映射的时候。
Attribute     Description
property      映射数据库列的字段或属性。如果JavaBean 的属性与给定的名称匹配，就会使用匹配的名字。否则，MyBatis将搜索给定名称的字段。
                            两种情况下您都可以使用逗点的属性形式。比如，您可以映射到“username”，也可以映射到“address.street.number”。
column        数据库的列名或者列标签别名。与传递给resultSet.getString(columnName)的参数名称相同。
javaType      完整java类名或别名(参考上面的内置别名列表)。如果映射到一个JavaBean，那MyBatis 通常会自行检测到。
                            然而，如果映射到一个HashMap，那您应该明确指定javaType 来确保所需行为。
jdbcType      这张表下面支持的JDBC类型列表列出的JDBC类型。这个属性只在insert，update或delete 的时候针对允许空的列有用。
              JDBC 需要这项，但MyBatis 不需要。如果您直接编写JDBC代码，在允许为空值的情况下需要指定这个类型。
typeHandler   我们已经在文档中讨论过默认类型处理器。使用这个属性可以重写默认类型处理器。
                            它的值可以是一个TypeHandler实现的完整类名，也可以是一个类型别名。